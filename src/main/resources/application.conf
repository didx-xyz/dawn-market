purchase-proto {
  places = ["start", "shopping-cart", "payment", "delivery", "end"]
  transitions = ["order", "checkout", "deliver","done"]

  start = { place = "start", weight = 2, initial-params = ["did","location"]}
  end = "end"
  weights = [
  {start = "start", transition = "order", end = "shopping-cart", action = "create-order", action-params = ["order-date", "order-id", "order-name", "order-description", "order-amount"]},
  {start = "shopping-cart", transition = "order", end = "shopping-cart", action = "create-order", action-params = ["order-date", "order-id", "order-name", "order-description", "order-amount", "checkout"]},
  {start = "shopping-cart", transition = "checkout", end = "payment", action = "pay-order", action-params = ["order-id", "order-description", "order-amount"]},
  {start = "payment", transition = "deliver", end = "delivery", action = "receive-order", action-params = ["order-id", "location"]},
  {start = "delivery", transition = "done", end = "end", action = "complete-order", action-params = ["order-id", "order-amount"]},
  ]
}

yoma-query-opps-proto {
  places = ["greeting", "onboarding", "confirmOnboardingResult", "explore", "end"]
  transitions = ["provideInfo", "gatherMoreInfo", "confirmInfo", "rejectInfo", "indeterminateResponse", "exploreOpportunities", "complete"]

  start = { place = "greeting", weight = 0, initial-params = []}
  end = "end"
  weights = [
    {
      start = "greeting", 
      transition = "provideInfo", 
      end = "onboarding", 
      action = "askForOnboardingInfo", 
      action-params = [],
      agent-script = "You are Yoma, an onboarding assistant! in charge of obtaining the following information from the user: Name; Email; Cellphone. Prompt the user until you have the required info. Be friendly. When receiving a first message from a user, ask for the info you still need.",
      conversation-result = "fullName: Option[String] = None, email: Option[String] = None, cellphone: Option[String] = None"
    },
    {
      start = "onboarding", 
      transition = "gatherMoreInfo", 
      end = "onboarding", 
      action = "askForOnboardingInfo", 
      action-params = ["fullName", "email", "cellphone"]
      agent-script = "You are Yoma, an onboarding assistant! in charge of obtaining the following information from the user: Name; Email; Cellphone. Prompt the user until you have the required info. Be friendly. When receiving a first message from a user, ask for the info you still need.",
      conversation-result = "fullName: Option[String] = None, email: Option[String] = None, cellphone: Option[String] = None"
    },
    {
      start = "onboarding", 
      transition = "confirmInfo", 
      end = "confirmOnboardingResult", 
      action = "confirmOnboardingInfo", 
      action-params = ["fullName", "email", "cellphone"]
      agent-script = "You are Yoma, an onboarding assistant! in charge of obtaining the following information from the user: Name; Email; Cellphone. Prompt the user until you have the required info. Be friendly. When receiving a first message from a user, ask for the info you still need.",
      conversation-result = "fullName: Option[String] = None, email: Option[String] = None, cellphone: Option[String] = None"
    },
    {
      start = "confirmOnboardingResult",
      transition = "rejectInfo", 
      end = "onboarding", 
      action = "reAskForOnboardingInfo", 
      action-params = ["fullName", "email", "cellphone"]
      agent-script = "Your job is to receive confirmation from the user - whether the data we've recorded is correct or not. They might respond with: yes, indeed, correct, of course, :+1+, a thumbs up emoji, slang like shap, or other general confirmation - all of this would confirm their data (confirmed = True). If they respond with: no, not correct, incorrect, of course not, :-1+, a thumbs down emoji, slang like wtf, or other general rejection - all of this would confirm their data is incorrect (confirmed = False). If they give an unclear, blank, neutral or irrelevant response, we'll consider this to be confirmed = None. Process their response and provide us with an Optional[Boolean]. confirmed = True, False, or None.",
      conversation-result = "userHasConfirmedOptionalBool: Option[Boolean] = None"
    },
    {
      start = "confirmOnboardingResult", 
      transition = "indeterminateResponse", 
      end = "confirmOnboardingResult", 
      action = "reConfirmOnboardingInfo", 
      action-params = ["fullName", "email", "cellphone"]
      agent-script = "Your job is to receive confirmation from the user - whether the data we've recorded is correct or not. They might respond with: yes, indeed, correct, of course, :+1+, a thumbs up emoji, slang like shap, or other general confirmation - all of this would confirm their data (confirmed = True). If they respond with: no, not correct, incorrect, of course not, :-1+, a thumbs down emoji, slang like wtf, or other general rejection - all of this would confirm their data is incorrect (confirmed = False). If they give an unclear, blank, neutral or irrelevant response, we'll consider this to be confirmed = None. Process their response and provide us with an Optional[Boolean]. confirmed = True, False, or None.",
      conversation-result = "userHasConfirmedOptionalBool: Option[Boolean] = None"
    },
    {
      start = "confirmOnboardingResult", 
      transition = "confirmInfo", 
      end = "explore", 
      action = "transitionToExplore", 
      action-params = []
      agent-script = "Your job is to receive confirmation from the user - whether the data we've recorded is correct or not. They might respond with: yes, indeed, correct, of course, :+1+, a thumbs up emoji, slang like shap, or other general confirmation - all of this would confirm their data (confirmed = True). If they respond with: no, not correct, incorrect, of course not, :-1+, a thumbs down emoji, slang like wtf, or other general rejection - all of this would confirm their data is incorrect (confirmed = False). If they give an unclear, blank, neutral or irrelevant response, we'll consider this to be confirmed = None. Process their response and provide us with an Optional[Boolean]. confirmed = True, False, or None.",
      conversation-result = "userHasConfirmedOptionalBool: Option[Boolean] = None"
    },
    {
      start = "explore", 
      transition = "exploreOpportunities", 
      end = "explore", 
      action = "queryOpportunities", 
      action-params = []
    },
    {
      start = "explore", 
      transition = "complete", 
      end = "end", 
      action = "endSession", 
      action-params = []
    }
  ]
}
